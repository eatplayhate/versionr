using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Versionr.Commands
{
    class InitVerbOptions : VerbOptionBase
    {
        public override string Usage
        {
            get
            {
                return "#b#versionr #i#init## #q#[branch name]##";
            }
        }
        public override string[] Description
        {
            get
            {
                return new string[]
                {
                    "#q#This command creates a new, empty ##vault#q# under Versionr control.",
                    "",
                    "The #b#versionr#q# vault will be placed in a subdirectory of the current folder named #b#`.versionr`#q#. Once the vault is initialized, all subdirectories of the current folder are regarded as being part of the vault.",
                    "",
                    "As part of this process, an initial (empty) commit is autogenerated by Versionr to act as the ##root#q# of the repository. This is placed in a branch named ##`master`#q# by default. You are able to specify the name of this initial branch during the invocation of this command.",
                    "",
                    "This command will also initialize the object storage mechanism that the repository will subsequently use. Once initialized, this cannot be changed without cloning or creating a new vault.",
                    "",
                    "This operation will fail if the current directory is already part of a Versionr repository tree."
                };
            }
        }

        public override string Verb
        {
            get
            {
                return "init";
            }
        }

        [CommandLine.ValueOption(0)]
        public string BranchName { get; set; }
    }
    class Init : BaseCommand
    {
        public bool Run(System.IO.DirectoryInfo workingDirectory, object options)
        {
            InitVerbOptions localOptions = options as InitVerbOptions;
            Printer.EnableDiagnostics = localOptions.Verbose;
            Printer.Quiet = localOptions.Quiet;
            if (string.IsNullOrEmpty(localOptions.BranchName))
                localOptions.BranchName = "master";
            Area ws = Area.Init(workingDirectory, localOptions.BranchName);
            if (ws == null)
                return false;

            Printer.WriteLineMessage("Version #b#{0}## on branch \"#b#{1}##\" (rev {2})\n", ws.Version.ID, ws.CurrentBranch.Name, ws.Version.Revision);

            return true;
        }
    }
}
